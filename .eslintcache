[{"C:\\development\\gym\\src\\index.tsx":"1","C:\\development\\gym\\src\\reportWebVitals.ts":"2","C:\\development\\gym\\src\\App.tsx":"3","C:\\development\\gym\\src\\UI\\Input\\Input.tsx":"4","C:\\development\\gym\\src\\firebase.js":"5","C:\\development\\gym\\src\\components\\AddTimeEntryForm.tsx":"6","C:\\development\\gym\\src\\helpers\\date-utils.ts":"7","C:\\development\\gym\\src\\helpers\\get-activities.ts":"8","C:\\development\\gym\\src\\helpers\\get-today-activities.ts":"9","C:\\development\\gym\\src\\components\\NumberPad\\NumberPad.tsx":"10","C:\\development\\gym\\src\\components\\PreviousActivities\\PreviousActivities.tsx":"11","C:\\development\\gym\\src\\components\\TodayActivities\\TodayActivities.tsx":"12","C:\\development\\gym\\src\\App-firebase.tsx":"13","C:\\development\\gym\\src\\services\\data-service.ts":"14"},{"size":509,"mtime":1619177999785,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":2926,"mtime":1619177845836,"results":"18","hashOfConfig":"16"},{"size":3354,"mtime":1607926694123,"results":"19","hashOfConfig":"16"},{"size":526,"mtime":1608098902046,"results":"20","hashOfConfig":"16"},{"size":733,"mtime":1609081365527,"results":"21","hashOfConfig":"16"},{"size":2087,"mtime":1609181004695,"results":"22","hashOfConfig":"16"},{"size":1057,"mtime":1609181360744,"results":"23","hashOfConfig":"16"},{"size":414,"mtime":1609181380322,"results":"24","hashOfConfig":"16"},{"size":1502,"mtime":1609265427546,"results":"25","hashOfConfig":"16"},{"size":1292,"mtime":1609959442797,"results":"26","hashOfConfig":"16"},{"size":1067,"mtime":1619181892415,"results":"27","hashOfConfig":"16"},{"size":3159,"mtime":1619182042666,"results":"28","hashOfConfig":"16"},{"size":2636,"mtime":1619184636048,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"27j44p",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\development\\gym\\src\\index.tsx",[],"C:\\development\\gym\\src\\reportWebVitals.ts",[],["63","64"],"C:\\development\\gym\\src\\App.tsx",["65"],"C:\\development\\gym\\src\\UI\\Input\\Input.tsx",["66"],"/* eslint-disable require-jsdoc */\r\nimport React, {useEffect, ChangeEvent} from 'react';\r\nimport './Input.css';\r\n\r\ninterface InputProps {\r\n  id?: string\r\n  value?: any\r\n  /**\r\n   * Method that is called when blur occurs.\r\n   */\r\n  blurHandler?: () => void\r\n  /**\r\n   * Method that is called when focus occurs.\r\n   */\r\n  focusHandler?: (arg0: any) => void\r\n  /**\r\n   * The icon to be used with this input field.\r\n   */\r\n  icon?: string\r\n  /**\r\n   * The name of this component to be used with forms.\r\n   */\r\n  name?: string\r\n  /**\r\n   * The placeholder for the input field.\r\n   */\r\n  placeholder?: any\r\n  /**\r\n   * The type of this input field.\r\n   */\r\n  type?: 'text' | 'password' | 'number' | 'time' | 'date'\r\n  showError?: any\r\n  errorText?: string\r\n\r\n  onChangeValue?: (arg0: ChangeEvent<HTMLInputElement>) => void\r\n  onKeyDownEvent?: (arg0: React.KeyboardEvent) => void\r\n  ref?: React.MutableRefObject<undefined>\r\n  className?: string\r\n  disableAutoComplete?: boolean\r\n}\r\n\r\nconst Input = (props: InputProps) => {\r\n  // useEffect(() => {\r\n  //   if (props.type === 'date') {\r\n  //     // @ts-ignore\r\n  //     flatpickr.localize(flatpickr.l10ns.fi);\r\n  //     // @ts-ignore\r\n  //     flatpickr.l10ns.default.firstDayOfWeek = 1;\r\n  //     // @ts-ignore\r\n  //     flatpickr(input, {\r\n  //       weekNumbers: true,\r\n  //       dateFormat: 'd.m.Y',\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n\r\n  const handleBlur = (event: React.FocusEvent) => {\r\n    const value = props.value;\r\n\r\n    if (value === '') {\r\n      // setErrorText('');\r\n      // e.persist();\r\n      // if (props.onChangeValue) {\r\n      //   props.onChangeValue();\r\n      // }\r\n    }\r\n\r\n    // if (props.type === 'hrTime') {\r\n    //   if (value.length < 3) {\r\n    //     if (parseInt(value) < 0 || parseInt(value) > 23) {\r\n    //     } else {\r\n    //       input.value = value + ':00';\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n\r\n    // input.blur();\r\n\r\n    if (props.blurHandler) {\r\n      props.blurHandler();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Resets error text and fires passed onChangeValue(event) event.\r\n   * event.persist() is explained here:\r\n   * https://reactjs.org/docs/events.html#event-pooling\r\n   * @param {ChangeEvent<HTMLInputElement>} event\r\n   */\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (props.onChangeValue) {\r\n      props.onChangeValue(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={'Input' + (props.icon ? ' icon' : '')}\r\n    >\r\n      <input\r\n        id={props.id}\r\n        type={props.type || 'text'}\r\n        className={(props.showError ? 'border-red-600' : '') +\r\n          (props.className ? (' ' + props.className) : '')}\r\n        placeholder={props.placeholder}\r\n        onFocus={(event) => props.focusHandler && props.focusHandler(event)}\r\n        onBlur={(event) => handleBlur(event)}\r\n        onChange={(event) => handleChange(event)}\r\n        onKeyDown={event => {\r\n          if (props.onKeyDownEvent) {\r\n            props.onKeyDownEvent(event);\r\n          }\r\n        }}\r\n        autoComplete={props.disableAutoComplete ? 'off' : ''}\r\n        value={props.value}\r\n      />\r\n      {props.icon && <i className=\"material-icons\">{props.icon}</i>}\r\n      { (props.showError &&\r\n        props.errorText) &&\r\n        <p className=\"text-red-600 text-sm p-1\">{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Input;\r\n",["67","68"],"C:\\development\\gym\\src\\firebase.js",[],["69","70"],"C:\\development\\gym\\src\\components\\AddTimeEntryForm.tsx",[],"C:\\development\\gym\\src\\helpers\\date-utils.ts",[],"C:\\development\\gym\\src\\helpers\\get-activities.ts",[],"C:\\development\\gym\\src\\helpers\\get-today-activities.ts",[],"C:\\development\\gym\\src\\components\\NumberPad\\NumberPad.tsx",[],["71","72"],"C:\\development\\gym\\src\\components\\PreviousActivities\\PreviousActivities.tsx",[],"C:\\development\\gym\\src\\components\\TodayActivities\\TodayActivities.tsx",["73"],"C:\\development\\gym\\src\\App-firebase.tsx",["74"],"C:\\development\\gym\\src\\services\\data-service.ts",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":9,"column":8,"nodeType":"81","messageId":"82","endLine":9,"endColumn":17},{"ruleId":"79","severity":1,"message":"83","line":2,"column":16,"nodeType":"81","messageId":"82","endLine":2,"endColumn":25},{"ruleId":"75","replacedBy":"84"},{"ruleId":"77","replacedBy":"85"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"86"},{"ruleId":"77","replacedBy":"87"},{"ruleId":"79","severity":1,"message":"88","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":9,"column":8,"nodeType":"81","messageId":"82","endLine":9,"endColumn":17},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"@typescript-eslint/no-unused-vars","'NumberPad' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.",["89"],["90"],["89"],["90"],"'getDate' is defined but never used.","no-global-assign","no-unsafe-negation"]