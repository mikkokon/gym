[{"C:\\development\\gym\\src\\index.tsx":"1","C:\\development\\gym\\src\\reportWebVitals.ts":"2","C:\\development\\gym\\src\\App.tsx":"3","C:\\development\\gym\\src\\UI\\Input\\Input.tsx":"4","C:\\development\\gym\\src\\firebase.js":"5","C:\\development\\gym\\src\\components\\AddTimeEntryForm.tsx":"6","C:\\development\\gym\\src\\helpers\\date-utils.ts":"7","C:\\development\\gym\\src\\helpers\\get-activities.ts":"8","C:\\development\\gym\\src\\helpers\\get-today-activities.ts":"9","C:\\development\\gym\\src\\components\\NumberPad\\NumberPad.tsx":"10","C:\\development\\gym\\src\\components\\PreviousActivities\\PreviousActivities.tsx":"11","C:\\development\\gym\\src\\components\\TodayActivities\\TodayActivities.tsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":2926,"mtime":1609959980845,"results":"16","hashOfConfig":"14"},{"size":3354,"mtime":1607926694123,"results":"17","hashOfConfig":"14"},{"size":526,"mtime":1608098902046,"results":"18","hashOfConfig":"14"},{"size":733,"mtime":1609081365527,"results":"19","hashOfConfig":"14"},{"size":2087,"mtime":1609181004695,"results":"20","hashOfConfig":"14"},{"size":1057,"mtime":1609181360744,"results":"21","hashOfConfig":"14"},{"size":414,"mtime":1609181380322,"results":"22","hashOfConfig":"14"},{"size":1502,"mtime":1609265427546,"results":"23","hashOfConfig":"14"},{"size":1292,"mtime":1609959442797,"results":"24","hashOfConfig":"14"},{"size":1064,"mtime":1609959420544,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"27j44p",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"C:\\development\\gym\\src\\index.tsx",[],["58","59"],"C:\\development\\gym\\src\\reportWebVitals.ts",[],"C:\\development\\gym\\src\\App.tsx",["60"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport firebase from './firebase';\r\nimport AddTimeEntryForm from './components/AddTimeEntryForm';\r\nimport PreviousActivities from './components/PreviousActivities/PreviousActivities';\r\nimport { getActivities } from './helpers/get-activities';\r\nimport { getYearMonthDayfromThisDate } from './helpers/date-utils';\r\nimport { getTodayActivities } from './helpers/get-today-activities';\r\nimport NumberPad from './components/NumberPad/NumberPad';\r\nimport TodayActivities from './components/TodayActivities/TodayActivities';\r\n\r\nfunction useTimes(){\r\n  const [times, setTimes] = useState([]);\r\n \r\n  useEffect(() => {\r\n    const unsubscribe = firebase\r\n    .firestore()\r\n    .collection('practiseDays')\r\n    .onSnapshot((snapshot) => {\r\n      const newTimes:any = snapshot.docs.map((doc) => {\r\n        return { id: doc.id, ...doc.data() }\r\n      }) \r\n      setTimes(newTimes)\r\n    })\r\n    return () => unsubscribe();    \r\n  }, []) \r\n  return times\r\n}\r\n\r\nfunction App() {\r\n \r\n  const times = useTimes();\r\n  \r\n  const [activityType, setActivityType] = useState('');\r\n  const [weigth, setWeigth] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [isActivitiesOpen, setActivitiesOpen] = useState(true); \r\n\r\n  const previousActivities = getActivities(times, activityType)\r\n  const todayActivities = getTodayActivities(times, activityType)\r\n   \r\n\r\n  const onSubmit = (event: any)=> {\r\n    event.preventDefault();\r\n\r\n    firebase\r\n    .firestore()\r\n    .collection('practiseDays')\r\n    .add({\r\n      date: getYearMonthDayfromThisDate(), // '2020,12,28'\r\n      type: activityType,\r\n      weigth: weigth,\r\n      amount: amount\r\n    })\r\n    .then(() => {\r\n      // setWeigth(0);\r\n      // setAmount(0);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='App'>\r\n        {/* <NumberPad/> */}\r\n        <p>sorttaa painon mukaan</p>\r\n        { isActivitiesOpen &&\r\n          <div className='activities'>   \r\n            <PreviousActivities\r\n              activityType={activityType}\r\n              times={previousActivities} />\r\n            <TodayActivities\r\n              activityType={activityType}\r\n              times={todayActivities} />  \r\n          </div>\r\n        }\r\n\r\n        <AddTimeEntryForm\r\n          onWeigthEvent={(event:any)=>setWeigth(parseInt(event.target.value))}\r\n          weigth={weigth}\r\n          onAmountEvent={(event:any)=>setAmount(parseInt(event.target.value))} \r\n          amount={amount}\r\n          onSubmit={onSubmit} />\r\n\r\n        <div onClick={() => setActivitiesOpen(!isActivitiesOpen)}>SPORT</div>\r\n        <div>KG</div>\r\n        <div>REPS</div>\r\n        <button onClick={()=> setActivityType('penkki')} >PENKKI</button>\r\n        <button onClick={()=> setActivityType('kyykky')} >KYYKKY</button>\r\n      </div>  \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n // FORMI ???  kt.https://www.youtube.com/watch?v=rSgbYCdc4G0 ","C:\\development\\gym\\src\\UI\\Input\\Input.tsx",["61"],"/* eslint-disable require-jsdoc */\r\nimport React, {useEffect, ChangeEvent} from 'react';\r\nimport './Input.css';\r\n\r\ninterface InputProps {\r\n  id?: string\r\n  value?: any\r\n  /**\r\n   * Method that is called when blur occurs.\r\n   */\r\n  blurHandler?: () => void\r\n  /**\r\n   * Method that is called when focus occurs.\r\n   */\r\n  focusHandler?: (arg0: any) => void\r\n  /**\r\n   * The icon to be used with this input field.\r\n   */\r\n  icon?: string\r\n  /**\r\n   * The name of this component to be used with forms.\r\n   */\r\n  name?: string\r\n  /**\r\n   * The placeholder for the input field.\r\n   */\r\n  placeholder?: any\r\n  /**\r\n   * The type of this input field.\r\n   */\r\n  type?: 'text' | 'password' | 'number' | 'time' | 'date'\r\n  showError?: any\r\n  errorText?: string\r\n\r\n  onChangeValue?: (arg0: ChangeEvent<HTMLInputElement>) => void\r\n  onKeyDownEvent?: (arg0: React.KeyboardEvent) => void\r\n  ref?: React.MutableRefObject<undefined>\r\n  className?: string\r\n  disableAutoComplete?: boolean\r\n}\r\n\r\nconst Input = (props: InputProps) => {\r\n  // useEffect(() => {\r\n  //   if (props.type === 'date') {\r\n  //     // @ts-ignore\r\n  //     flatpickr.localize(flatpickr.l10ns.fi);\r\n  //     // @ts-ignore\r\n  //     flatpickr.l10ns.default.firstDayOfWeek = 1;\r\n  //     // @ts-ignore\r\n  //     flatpickr(input, {\r\n  //       weekNumbers: true,\r\n  //       dateFormat: 'd.m.Y',\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n\r\n  const handleBlur = (event: React.FocusEvent) => {\r\n    const value = props.value;\r\n\r\n    if (value === '') {\r\n      // setErrorText('');\r\n      // e.persist();\r\n      // if (props.onChangeValue) {\r\n      //   props.onChangeValue();\r\n      // }\r\n    }\r\n\r\n    // if (props.type === 'hrTime') {\r\n    //   if (value.length < 3) {\r\n    //     if (parseInt(value) < 0 || parseInt(value) > 23) {\r\n    //     } else {\r\n    //       input.value = value + ':00';\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n\r\n    // input.blur();\r\n\r\n    if (props.blurHandler) {\r\n      props.blurHandler();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Resets error text and fires passed onChangeValue(event) event.\r\n   * event.persist() is explained here:\r\n   * https://reactjs.org/docs/events.html#event-pooling\r\n   * @param {ChangeEvent<HTMLInputElement>} event\r\n   */\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (props.onChangeValue) {\r\n      props.onChangeValue(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={'Input' + (props.icon ? ' icon' : '')}\r\n    >\r\n      <input\r\n        id={props.id}\r\n        type={props.type || 'text'}\r\n        className={(props.showError ? 'border-red-600' : '') +\r\n          (props.className ? (' ' + props.className) : '')}\r\n        placeholder={props.placeholder}\r\n        onFocus={(event) => props.focusHandler && props.focusHandler(event)}\r\n        onBlur={(event) => handleBlur(event)}\r\n        onChange={(event) => handleChange(event)}\r\n        onKeyDown={event => {\r\n          if (props.onKeyDownEvent) {\r\n            props.onKeyDownEvent(event);\r\n          }\r\n        }}\r\n        autoComplete={props.disableAutoComplete ? 'off' : ''}\r\n        value={props.value}\r\n      />\r\n      {props.icon && <i className=\"material-icons\">{props.icon}</i>}\r\n      { (props.showError &&\r\n        props.errorText) &&\r\n        <p className=\"text-red-600 text-sm p-1\">{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Input;\r\n",["62","63"],"C:\\development\\gym\\src\\firebase.js",[],["64","65"],"C:\\development\\gym\\src\\components\\AddTimeEntryForm.tsx",[],"C:\\development\\gym\\src\\helpers\\date-utils.ts",[],"C:\\development\\gym\\src\\helpers\\get-activities.ts",[],"C:\\development\\gym\\src\\helpers\\get-today-activities.ts",[],"C:\\development\\gym\\src\\components\\NumberPad\\NumberPad.tsx",[],["66","67"],"C:\\development\\gym\\src\\components\\PreviousActivities\\PreviousActivities.tsx",[],"C:\\development\\gym\\src\\components\\TodayActivities\\TodayActivities.tsx",["68"],"import { getDate } from \"../../helpers/date-utils\";\r\nimport './TodayActivities.css' \r\n\r\ninterface ITimeListProps {\r\n  times: ITimes[]\r\n  activityType: string\r\n}\r\n\r\ninterface ITimes {\r\n  amount: number\r\n  date: Date\r\n  id: string\r\n  type: string\r\n  weigth: number\r\n}\r\n\r\nconst TodayActivities = (props: ITimeListProps) => {\r\n  console.log('timelist today: ', props.times)\r\n  return (\r\n    <div>\r\n      <h4>TODAY</h4>\r\n      \r\n      <div>{props.times[0]?.type}</div>\r\n      {props.times.map((item:any) => \r\n         <div key={item.id} className=\"flex-container\">\r\n          <div className=\"item1\">{item.weigth}</div>\r\n          <div className=\"item2\">{item.amount}</div>\r\n         </div>  \r\n      )}\r\n    </div>\r\n    \r\n    // <div>\r\n    //   <ol>\r\n    //     {props.times.map((time: any) => \r\n    //       <li key={time.id}>\r\n    //         <div className=\"time-entry\">{getDate(time.date)}</div>\r\n    //         <div className='time'>{time.type}</div>    \r\n    //       </li>\r\n    //     )}   \r\n    // </ol>\r\n    // </div>  \r\n  )\r\n}\r\n\r\nexport default TodayActivities;",["69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":9,"column":8,"nodeType":"77","messageId":"78","endLine":9,"endColumn":17},{"ruleId":"75","severity":1,"message":"79","line":2,"column":16,"nodeType":"77","messageId":"78","endLine":2,"endColumn":25},{"ruleId":"71","replacedBy":"80"},{"ruleId":"73","replacedBy":"81"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"82"},{"ruleId":"73","replacedBy":"83"},{"ruleId":"75","severity":1,"message":"84","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":17},{"ruleId":"71","replacedBy":"85"},{"ruleId":"73","replacedBy":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'NumberPad' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.",["87"],["88"],["87"],["88"],"'getDate' is defined but never used.",["87"],["88"],"no-global-assign","no-unsafe-negation"]